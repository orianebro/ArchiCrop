from __future__ import annotations

import math

from oawidgets.plantgl import *  # noqa: F403

from openalea.plantgl.all import Color3, Material

from .cereal_plant import cereal
from .display import build_scene
from .growth import (
    init_visible_variables,
    mtg_turtle_time_with_constraint,
)
from .stand import agronomic_plot


class ArchiCrop:

    # g = None 

    def __init__(self, 
                 height,
                #  nb_phy,
                 leaf_area,
                 nb_short_phy=4,
                 short_phy_height=3,
                 wl=0.1,
                 diam_base=1,
                 diam_top=1,
                 insertion_angle=30,
                 scurv=0.7,
                 curvature=100,
                 klig=0.6,
                 swmax=0.55,
                 f1=0.64,
                 f2=0.92,
                 stem_q=1.1,
                 rmax=0.8,
                 skew=0.0005,
                 phyllotactic_angle=137.5,
                 phyllotactic_deviation=0,
                 phyllochron=40,
                #  plastochron=30,
                 stem_duration=1.6,
                 leaf_duration=1.6,
                 leaf_lifespan=300,
                 nb_tillers=0,
                 tiller_delay=1,
                 tiller_angle=30,
                 gravitropism_coefficient=0.12,
                 plant_orientation=45,
                 reduction_factor=None,
                 daily_dynamics=None):
        """
        Initialize a plant generated by ArchiCrop model.

        :param nb_phy: int, number of phytomers
        :param height: float, height of the main stem (in cm)
        :param leaf_area: float, maximal potential leaf area of plant (in cm²)
        :param wl: float, leaf width-to-length ratio
        :param diam_base: float, diameter of the base of the main stem (in cm)
        :param diam_top: float, diameter of the top of the main stem (in cm)
        :param insertion_angle: float, insertion angle of the leaf (i.e. between the stem and the tangent line at the base of the leaf) (in °)
        :param scurv: float, curvilinear abscissa of inflexion point for leaf curvature (in [0,1])
        :param curvature: float, curvature angle (i.e. angle between insertion angle and the tangent line at the tip of the leaf) (in °)
        # :param alpha: float, parameter of the polynomial defining leaf shape
        :param stem_q: float, common ratio of the geometric series defining internode lengths for a given height (cf partition of unit)
        :param rmax: float, proportion of the total number of leaves corresponding to the position of the longest leaf, from the base of the stem, according to a bell-shaped distribution of leaf lengths along the stem (in [0,1])
        :param skem: float, parameter describing the asymmetry of the bell-shaped distribution of leaf lengths along the stem
        :param phyllotactic_angle: float, angle between the midribs of two consecutive leaves around the stem (in °)
        :param phyllotactic_deviation: float, half-amplitude of deviation around phyllotactic angle (in °)
        :param phyllochron: float, phyllochron, i.e. internode appearance rate (in °C.day/internode)
        :param plastochron: float, plastochron, i.e. leaf appearance rate (in °C.day/leaf)
        :param leaf_lifespan: float, leaf lifespan (in °C.day)
        :param nb_tillers: int, number of tillers
        :param tiller_delay: int, delay between the appearance of a phytomer and the appearance of a tiller from the lateral meristem (in phyllochron)
        :param tiller_angle: float, angle of the tiller wrt to tiller of prior order (in °)
        :param gravitropism_coefficient: float, coefficient of gravitropism (in [0,1])
        :param plant_orientation: float, orientation of the plant wrt to the North (in °)
        :param reduction_factor: float, reduction factor for tiller properties
        :param daily_dynamics: dict, daily dynamics of the plant, with keys as thermal time and values as dict containing:
            - "Phenology" (str): 'juvenile', 'exponential', or 'repro'.
            - "Thermal time" (float): thermal time at this stage (in °C.day).
            - "Plant leaf area" (float): plant leaf area at this thermal time (in cm²).
            - "Leaf area increment" (float): leaf area increment at this thermal time (in cm²).
            - "Plant height" (float): plant height at this thermal time (in cm).
            - "Height increment" (float): height increment at this thermal time (in cm).
            - "Absorbed PAR" (float): absorbed PAR at this thermal time (in MJ/m²)

        """

        if daily_dynamics is not None:

            for key, value in daily_dynamics.items():
                if value["Phenology"] == 'juvenile':
                    next_key = key + 1
                    if next_key in daily_dynamics and daily_dynamics[next_key]["Phenology"] == 'exponential':
                        end_juv = value["Thermal time"] + daily_dynamics[1]["Thermal time"]

                elif value["Phenology"] == 'exponential':
                    next_key = key + 1
                    if next_key in daily_dynamics and daily_dynamics[next_key]["Phenology"] == 'repro':
                        end_veg = value["Thermal time"] + daily_dynamics[1]["Thermal time"]
                        break
                
                else:
                    end_veg = 0

        else:

            end_juv = 0
            end_veg = 1000
            
        thermal_time = [value["Thermal time"] for value in daily_dynamics.values()]

        self.nb_phy = math.ceil((end_veg-thermal_time[0]-(leaf_duration*phyllochron))/phyllochron) # nb_phy
        self.height = height
        self.leaf_area = leaf_area
        self.nb_short_phy = nb_short_phy
        self.short_phy_height = short_phy_height
        self.wl = wl
        self.diam_base = diam_base
        self.diam_top = diam_top
        self.insertion_angle = insertion_angle
        self.scurv = scurv
        self.curvature = curvature
        # self.alpha = alpha
        self.klig = klig 
        self.swmax = swmax 
        self.f1 = f1 
        self.f2 = f2
        self.stem_q = stem_q
        self.rmax = rmax
        self.skew = skew
        self.phyllotactic_angle = phyllotactic_angle
        self.phyllotactic_deviation = phyllotactic_deviation
        self.phyllochron = phyllochron # (end_veg-thermal_time[0])/(leaf_duration+nb_phy)
        self.plastochron = phyllochron
        self.leaf_duration = leaf_duration # end_veg/phyllochron-nb_phy 
        self.stem_duration = stem_duration # end_veg/plastochron-nb_phy
        self.leaf_lifespan = leaf_lifespan
        self.nb_tillers = nb_tillers
        self.tiller_delay = tiller_delay
        self.reduction_factor = reduction_factor
        self.tiller_angle = tiller_angle
        self.gravitropism_coefficient = gravitropism_coefficient
        self.plant_orientation = plant_orientation

        self.daily_dynamics = daily_dynamics

        self.end_juv = end_juv
        self.end_veg = end_veg


    def generate_potential_plant(self):
        """
        Generate a potential plant from parameters.

        :return: MTG, MTG of the potential plant generated
        """
        self.g = cereal(nb_phy=self.nb_phy,
                        height=self.height,
                        leaf_area=self.leaf_area,
                        nb_short_phy=self.nb_short_phy,
                        short_phy_height=self.short_phy_height,
                        wl=self.wl,
                        diam_base=self.diam_base,
                        diam_top=self.diam_top,
                        insertion_angle=self.insertion_angle,
                        scurv=self.scurv,
                        curvature=self.curvature,
                        klig=self.klig, 
                        swmax=self.swmax, 
                        f1=self.f1, 
                        f2=self.f2,
                        stem_q=self.stem_q,
                        rmax=self.rmax,
                        skew=self.skew,
                        phyllotactic_angle=self.phyllotactic_angle,
                        phyllotactic_deviation=self.phyllotactic_deviation,
                        phyllochron=self.phyllochron, 
                        plastochron=self.plastochron, 
                        leaf_duration=self.leaf_duration, 
                        stem_duration=self.stem_duration, 
                        leaf_lifespan=self.leaf_lifespan, 
                        end_juv=self.end_juv,
                        nb_tillers=self.nb_tillers,
                        reduction_factor=self.reduction_factor,
                        tiller_delay=self.tiller_delay,
                        tiller_angle=self.tiller_angle,
                        gravitropism_coefficient=self.gravitropism_coefficient,
                        plant_orientation=self.plant_orientation)

    '''
    def define_development(self):
        """
        Define the development of the plant, by setting a start and an end thermal time for the growth of each organ.

        :param g: MTG, MTG of a plant
        :param phyllochron: float, phyllochron, i.e. internode appearance rate (in °C.day/internode)
        :param plastochron: float, plastochron, i.e. leaf appearance rate (in °C.day/leaf)
        :param leaf_duration: float, leaf elongation time / phyllochron
        :param stem_duration: float, internode elongation time / phyllochron

        :return: MTG of a plant
        """
                
        self.g = thermal_time(self.g, self.phyllochron, self.plastochron, self.leaf_duration, self.stem_duration, self.leaf_lifespan, self.end_juv)

        # return self.g
    '''
    
    def grow_plant(self):
        """
        Grow a plant following incremental constraints.

        :param g: MTG, MTG of a plant
        :param daily_dynamics: dict of dict.
                           The value for each key is another dictionary containing:
                            - "Thermal time" (float): thermal time (in °C.day).
                            - "Plant leaf area" (float): plant leaf area at a given thermal time (in cm²).
                            - "Leaf area increment" (float): leaf area increment at a given thermal time (in cm²).
                            - "Plant height" (float): plant height at a given thermal time (in cm).
                            - "Height increment" (float): height increment at a given thermal time (in cm).
                            - "Absorbed PAR" (float): absorbed PAR at a given thermal time (in MJ/m²)

        :return: list of MTGs, MTGs of growing plant through time
        """

        # Loop through time
        growing_plant = {}
        self.g = init_visible_variables(self.g, daily_dynamics=self.daily_dynamics)
        for k,v in self.daily_dynamics.items():
            gtemp = mtg_turtle_time_with_constraint(self.g, k, v)
            growing_plant[v["Date"]] = gtemp
            self.g = gtemp.copy() # copy
        
        return growing_plant
    

    def display_stand(self, sowing_density, length_plot, width_plot, inter_row):
        """
        Display a single plant with PlantGL from an MTG.

        :param g: MTG, MTG of a plant
        :param sowing_density: float, sowing density, same as in the crop model (in plants/m²)
        :param length_plot: float, length of the plot (in m)
        :param width_plot: float, width of the plot (in m)
        :param inter_row: float, inter-row (in m?)

        :return: PlantGL scene of a plant
        """
        nplants, positions, domain, domain_area, unit = agronomic_plot(length_plot, width_plot, sowing_density, inter_row, noise=0.1)
        nice_green = Color3((50, 100, 0))
        scene, _ = build_scene([self.g]*nplants, positions, leaf_material=Material(nice_green), stem_material=Material(nice_green))
        return scene

    def display_plant(self):
        """
        Display a single plant with PlantGL from an MTG.

        :return: PlantGL scene of a plant
        """
        nice_green = Color3((50, 100, 0))
        scene, _ = build_scene(self.g, leaf_material = Material(nice_green), stem_material=Material(nice_green))
        return scene