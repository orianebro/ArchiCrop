from __future__ import annotations

from oawidgets.plantgl import *
from openalea.plantgl.all import Material, Color3, Shape, Scene, Viewer, Translated, AxisRotated

from .cereals import build_shoot
from .growth import thermal_time, mtg_turtle_time_with_constraint, init_visible_variables, Growth
from .stand import agronomic_plot
from .display import build_scene


class ArchiCrop:

    g = None 

    def __init__(self, 
                 height,
                 nb_phy,
                 Smax,
                 wl,
                 diam_base,
                 diam_top,
                 insertion_angle,
                 scurv,
                 curvature,
                 klig, swmax, f1, f2,
                 stem_q,
                 rmax,
                 skew,
                 phyllotactic_angle,
                 phyllotactic_deviation,
                 phyllochron,
                 plastochron,
                 leaf_duration,
                 stem_duration,
                 leaf_lifespan):
        """
        Initialize a plant generated by ArchiCrop model.

        :param nb_phy: int, number of phytomers
        :param height: float, height of the main stem (in cm)
        :param Smax: float, maximal potential leaf area of plant (in cm²)
        :param wl: float, leaf width-to-length ratio
        :param diam_base: float, diameter of the base of the main stem (in cm)
        :param diam_top: float, diameter of the top of the main stem (in cm)
        :param insertion_angle: float, insertion angle of the leaf (i.e. between the stem and the tangent line at the base of the leaf) (in °)
        :param scurv: float, curvilinear abscissa of inflexion point for leaf curvature (in [0,1])
        :param curvature: float, curvature angle (i.e. angle between insertion angle and the tangent line at the tip of the leaf) (in °)
        # :param alpha: float, parameter of the polynom defining leaf shape
        :param stem_q: float, common ratio of the geometric series defining internode lengths for a given height (cf partition of unit)
        :param rmax: float, proportion of the total number of leaves corresponding to the position of the longest leaf, from the base of the stem, according to a bell-shaped distribution of leaf lengths along the stem (in [0,1])
        :param skem: float, parameter describing the asymmetry of the bell-shaped distribution of leaf lengths along the stem
        :param phyllotactic_angle: float, angle between the midribs of two consecutive leaves around the stem (in °)
        :param phyllotactic_deviation: float, half-amplitude of deviation around phyllotactic angle (in °)
        """
        self.nb_phy = nb_phy
        self.height = height
        self.Smax = Smax
        self.wl = wl
        self.diam_base = diam_base
        self.diam_top = diam_top
        self.insertion_angle = insertion_angle
        self.scurv = scurv
        self.curvature = curvature
        # self.alpha = alpha
        self.klig = klig 
        self.swmax = swmax 
        self.f1 = f1 
        self.f2 = f2
        self.stem_q = stem_q
        self.rmax = rmax
        self.skew = skew
        self.phyllotactic_angle = phyllotactic_angle
        self.phyllotactic_deviation = phyllotactic_deviation
        self.phyllochron = phyllochron
        self.plastochron = plastochron
        self.leaf_duration = leaf_duration
        self.stem_duration = stem_duration
        self.leaf_lifespan = leaf_lifespan


    def generate_potential_plant(self):
        """
        Generate a potential plant from parameters.

        :return: MTG, MTG of the potential plant generated
        """
        shoot, self.g = build_shoot(self.nb_phy,
                               self.height,
                               self.Smax,
                               self.wl,
                               self.diam_base,
                               self.diam_top,
                               self.insertion_angle,
                               self.scurv,
                               self.curvature,
                            #    self.alpha,
                               self.klig, 
                               self.swmax, 
                               self.f1, 
                               self.f2,
                               self.stem_q,
                               self.rmax,
                               self.skew,
                               self.phyllotactic_angle,
                               self.phyllotactic_deviation)
        # return self.g

    
    def define_development(self, increments):
        """
        Define the development of the plant, by setting a start and an end thermal time for the growth of each organ.

        :param g: MTG, MTG of a plant
        :param phyllochron: float, phyllochron, i.e. internode appearance rate (in °C.day/internode)
        :param plastochron: float, plastochron, i.e. leaf appearance rate (in °C.day/leaf)
        :param leaf_duration: float, leaf elongation time / phyllochron
        :param stem_duration: float, internode elongation time / phyllochron

        :return: MTG of a plant
        """
        for key, value in increments.items():
            if value["Phenology"] == 'juvenile':
                next_key = key + 1
                if next_key in increments and increments[next_key]["Phenology"] == 'exponential':
                    end_juv = value["Thermal time"]
                    break
                
        self.g = thermal_time(self.g, self.phyllochron, self.plastochron, self.leaf_duration, self.stem_duration, self.leaf_lifespan, end_juv)

        # return self.g
    
    def grow_plant(self, increments):
        """
        Grow a plant following incremental constraints.

        :param g: MTG, MTG of a plant
        :param increments: dict of dict.
                           The value for each key is another dictionary containing:
                            - "Thermal time" (float): thermal time (in °C.day).
                            - "Plant leaf area" (float): plant leaf area at a given thermal time (in cm²).
                            - "Leaf area increment" (float): leaf area increment at a given thermal time (in cm²).
                            - "Plant height" (float): plant height at a given thermal time (in cm).
                            - "Height increment" (float): height increment at a given thermal time (in cm).
                            - "Absorbed PAR" (float): absorbed PAR at a given thermal time (in MJ/m²)

        :return: list of MTGs, MTGs of growing plant through time
        """

        # Loop through time
        growing_plant = {}
        self.g = init_visible_variables(self.g)
        for v in increments.values():
            gtemp = mtg_turtle_time_with_constraint(self.g, v["Thermal time"], v)
            growing_plant[v["Thermal time"]] = gtemp
            self.g = gtemp.copy() # copy
        
        return growing_plant
    

    def display_stand(self, sowing_density, length_plot, width_plot, inter_row):
        """
        Display a single plant with PlantGL from an MTG.

        :param g: MTG, MTG of a plant
        :param sowing_density: float, sowing density, same as in the crop model (in plants/m²)
        :param length_plot: float, length of the plot (in m)
        :param width_plot: float, width of the plot (in m)
        :param inter_row: float, inter-row (in m?)

        :return: PlantGL scene of a plant
        """
        nplants, positions, domain, domain_area, unit = agronomic_plot(length_plot, width_plot, sowing_density, inter_row, noise=0.1)
        nice_green = Color3((50, 100, 0))
        scene, _ = build_scene([self.g]*nplants, positions, leaf_material=Material(nice_green), stem_material=Material(nice_green))
        return scene

    def display_plant(self):
        """
        Display a single plant with PlantGL from an MTG.

        :return: PlantGL scene of a plant
        """
        nice_green = Color3((50, 100, 0))
        scene, _ = build_scene(self.g, leaf_material = Material(nice_green), stem_material=Material(nice_green))
        return scene