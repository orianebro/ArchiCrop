from __future__ import annotations

from oawidgets.plantgl import *

from openalea.plantgl.all import Color3, Material

from .cereals import build_shoot
from .display import build_scene
from .dynamic import thermal_time, mtg_turtle_time_with_constraint


class ArchiCrop:
    def __init__(self, 
                 nb_phy,
                 height,
                 max_leaf_length,
                 wl,
                 diam_base,
                 diam_top,
                 insertion_angle,
                 scurv,
                 curvature,
                 alpha,
                 stem_q,
                 rmax,
                 skew,
                 phyllotactic_angle,
                 phyllotactic_deviation):
        """
        Initialize a plant generated by ArchiCrop model.

        :param nb_phy: int, number of phytomers
        :param height: float, height of the main stem (in cm)
        :param max_leaf_length: float, length of the longest leaf when ligulated (in cm)
        :param wl: float, leaf width-to-length ratio
        :param diam_base: float, diameter of the base of the main stem (in cm)
        :param diam_top: float, diameter of the top of the main stem (in cm)
        :param insertion_angle: float, insertion angle of the leaf (i.e. between the stem and the tangent line at the base of the leaf) (in °)
        :param scurv: float, curvilinear abscissa of inflexion point for leaf curvature (in [0,1])
        :param curvature: float, curvature angle (i.e. angle between insertion angle and the tangent line at the tip of the leaf) (in °)
        :param alpha: float, parameter of the polynom defining leaf shape
        :param stem_q: float, common ratio of the geometric series defining internode lengths for a given height (cf partition of unit)
        :param rmax: float, proportion of the total number of leaves corresponding to the position of the longest leaf, from the base of the stem, according to a bell-shaped distribution of leaf lengths along the stem (in [0,1])
        :param skem: float, parameter describing the asymmetry of the bell-shaped distribution of leaf lengths along the stem
        :param phyllotactic_angle: float, angle between the midribs of two consecutive leaves around the stem (in °)
        :param phyllotactic_deviation: float, half-amplitude of deviation around phyllotactic angle (in °)
        """
        self.nb_phy = nb_phy
        self.height = height
        self.max_leaf_length = max_leaf_length
        self.wl = wl
        self.diam_base = diam_base
        self.diam_top = diam_top
        self.insertion_angle = insertion_angle
        self.scurv = scurv
        self.curvature = curvature
        self.alpha = alpha
        self.stem_q = stem_q
        self.rmax = rmax
        self.skew = skew
        self.phyllotactic_angle = phyllotactic_angle
        self.phyllotactic_deviation = phyllotactic_deviation


    def generate_potential_plant(self):
        """
        Generate a potential plant from parameters.

        :return: MTG, MTG of the potential plant generated
        """
        shoot, g = build_shoot(self.nb_phy,
                               self.height,
                               self.max_leaf_length,
                               self.wl,
                               self.diam_base,
                               self.diam_top,
                               self.insertion_angle,
                               self.scurv,
                               self.curvature,
                               self.alpha,
                               self.stem_q,
                               self.rmax,
                               self.skew,
                               self.phyllotactic_angle,
                               self.phyllotactic_deviation)
        return g

    def display_plant(self, g):
        """
        Display a single plant with PlantGL from an MTG.

        :param g: MTG, MTG of a plant

        :return: PlantGL scene of a plant
        """
        nice_green = Color3((50, 100, 0))
        scene, nump = build_scene(
            g, leaf_material = Material(nice_green), stem_material=Material(nice_green)
        )
        return scene
    
    def grow_plant(g, increments):
        """
        Grow a plant following incremental constraints.

        :param g: MTG, MTG of a plant
        :param increments: dict of dict, where each key represents a thermal time increment.
                           The value for each key is another dictionary containing:
                            - "Plant leaf area" (float): plant leaf area at the given thermal time (in cm²).
                            - "Leaf area increment" (float): leaf area increment at the given thermal time (in cm²).
                            - "Plant height" (float): plant height at the given thermal time (in cm).
                            - "Height increment" (float): height increment at the given thermal time (in cm).
                            - "Absorbed PAR" (float): absorbed PAR at te given thermal time (in MJ/m²)

        :return: list ? dict ? of MTGs, MTGs of growing plant through time
        """
        # Add development 
        g = thermal_time(g, phyllochron=50.0, plastochron=40.0, leaf_duration=1.6, stem_duration=1.6)

        # Loop through time
        growing_plant = []
        for k,v in increments.items():
            growing_plant.append(mtg_turtle_time_with_constraint(g, k, v))
        
        return growing_plant